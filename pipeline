#!/usr/bin/env python

## Author: @zafarali
## July 2015
# This is a pipeline for the analysis of the output files from CC3D simulations using the cc3dtools
# library.
# call as: python pipeline.py <analysis_directory>
# Analysis directory must have the following files:
# start_cells_*
# finish_cells_*
# division_*
# genomes_*
# specs.txt

import matplotlib
matplotlib.use('Agg') # prevent use of a display

import numpy as np
import matplotlib.pyplot as plt
import sys
import glob
import time
import os
import csv
import shutil
import json
import pickle

event_sequence = 0

if len(sys.argv) == 1:
	sys.exit('No arguments supplied')
	
if sys.argv[1] == '--help' or sys.argv[1] == '-h':
	sys.exit('Complete documentation is available here: https://github.com/zafarali/metastasis/wiki/Using-pipeline.py')

if sys.argv[1] == 'init':
	if len(sys.argv) == 3:
		target = sys.argv[2]
		if not os.path.exists( target ):
			raise IOError('(!) PATH ' + target + ' DOESN\'T EXIST')
		else:
			shutil.copy2( './pipeline_templates/sampling.json' , target + '/sampling.json' )
			shutil.copy2( './pipeline_templates/specs.txt' , target + '/specs.txt')
			sys.exit('Initialzed')
	else:
		sys.exit('No <FOLDER> specitifed. run python pipeline.py -h for how to use this')

# convinience method to print things to the console with line numbers
def print2( string ):
	global event_sequence
	string = str(string)
	print ' Out [' + str(event_sequence) + ']: ' + string
	sys.stdout.flush()
	event_sequence += 1


time_info = '_'.join(time.asctime().split(' '))

# an analysis directory must be specified.
try:
	analysis_directory = sys.argv[1]
	if not os.path.exists( analysis_directory ):
		raise IOError()
except IndexError:
	sys.exit('(!) No analysis_directory was specified: \nanalysis_directory must be the first argument')
except IOError:
	sys.exit('IOError: (!) Analysis directory does not exist!')

# read all necessary files
print2('Analysis Directory: ' + analysis_directory)
try:
	out_directory = sys.argv[2]
except IndexError as e:
	print2('Out directory not specified, attempting to create one')
	try:
		out_directory = analysis_directory+'/pipe_out_'+time_info
		# create the output directory and save specs and sampling there
		if not os.path.exists( out_directory ):
			os.makedirs( out_directory )
	except Exception as e:
		print2('(!) Unknown Exception occured! \n'+str(e))
print2('Output Directory: ' + out_directory)
try:
	FILES = {
		'start' : glob.glob( analysis_directory + '/start_cells_*' )[0],
		'finish' : glob.glob( analysis_directory + '/finish_cells_*' )[0],
		'division' : glob.glob( analysis_directory + '/division_*' )[0],
		'genomes' : glob.glob( analysis_directory + '/genomes_*' )[0],
		'directory': analysis_directory,
		'specifications': glob.glob( analysis_directory + '/specs*' )[0],
		'out': out_directory
	}
	del analysis_directory
except IndexError as e:
	print2('(!) Failed to run: \n'+str(e))
	print2('---> (!) Incomplete files for data analysis. Analysis directory must have the following files:\n\
	start_cells_* (glob out: ' + str( glob.glob( analysis_directory + '/start_cells_*' ) ) + ')\n\
	finish_cells_* (glob out: ' + str( glob.glob( analysis_directory + '/finish_cells_*' ) ) + ')\n\
	division_* (glob out: ' + str( glob.glob( analysis_directory + '/division_*' ) ) + ')\n\
	genomes_* (glob out: ' + str( glob.glob( analysis_directory + '/genomes_*' ) ) + ')\n\
	specs.txt\n\
	These were not found in '+analysis_directory+'\n\
	GLOB OUT ' + str( glob.glob( analysis_directory +'/' ) ) + '\n\
	Following exception occured:\n'+str(e))
	sys.exit(1)
	# raise e

# load sampling strategies
print2('Importing Speficiations')

# will hold all specifications
SPECS = {}

with open( FILES['specifications'] , 'r' ) as f:
	reader = csv.reader( f )
	for row in reader:
		SPECS[ row[0] ] = SPECS.get( row[0] , {} )
		if len( row[2:] ) == 1:
			SPECS[ row[0] ][ row[1] ] = row[2:][0]
		else:
			SPECS[ row[0] ][ row[1] ] = row[2:]

# convinience method for looking up SPEC object
def SPEC_lookup( function_name , argument_name , default = None ):
	fn_specs = SPECS.get( function_name , None )
	if fn_specs is None:
		return default
	else:
		return fn_specs.get( argument_name , default )


print2('SPECS LOADED')

if SPEC_lookup( 'global', 'sample' ):
	if os.path.exists( FILES['directory'] + '/sampling.json' ):
		FILES['sampling'] = FILES['directory'] + '/sampling.json'

		with open( FILES['sampling'] ) as f:
			sampling_strategies = json.load( f )['sampling_strategies']
			print2('sampling strategies loaded')
	else:
		sys.exit('--->(!) No sampling strategy was provided in the form of sampling.json')

shutil.copy2( FILES['specifications'] , FILES['out'] + '/specs.txt' )

if SPEC_lookup('global', 'sample'):
	shutil.copy2( FILES['sampling'] , FILES['out'] + '/sampling.json' )

print2('File paths saved, directory created.')

print2('saving to:' + FILES['out'])



from cc3dtools.PostProcess import SpacePlot, PostProcess, TimeSeriesPlotters, proportion_pairwise_differences, EccentricityProcessing
from cc3dtools.GenomeCompare import GenomeCompare
from cc3dtools.Lineage import MultiLineage, lineage_bfs

# locate which cell is the cancer cell.
cancer_cell_ids = []
skip_types = [ 4 ]
# skip_types = [ ]


try:
	sp = SpacePlot( start_file = FILES['start'], \
		end_file = FILES['finish'], \
		projection = SPEC_lookup( 'spatial_plot' , 'projection', '2d' ), \
		skip_types = skip_types )
except Exception as e:
	print2('Unable to load cc3dtools.SpacePlot \n'+str(e))

with open( FILES['finish'] , 'r' ) as f:
	reader = csv.reader( f )
	for row in reader:
		if int(row[1]) != 1 and int(row[1]) != 4:
				cancer_cell_ids.append( int( row[0] ) )
	print2( 'There are ' + str( len( cancer_cell_ids ) ) + ' cancer cells' )


"""
S P A C E P L O T
"""
if SPEC_lookup('global', 'spatial_plot'):
	try:
		sp.plot_all( hide_numbers = SPEC_lookup( 'spatial_plot', 'hide_numbers', False ) , \
			save_fig = FILES['out']+'/spatial_plot' \
			)
		print2('saved spatial_plot')
	except Exception as e:
		print2('(!) Unable to save spatial_plot \n' + str(e) )


"""
L I N E A G E S
"""

if SPEC_lookup( 'global' , 'multilineage' ):
	try:
		if SPEC_lookup( 'multilineage' , 'cancer_only' ):
			ml = MultiLineage( file_name = FILES['division'] , cancer_cell_ids = cancer_cell_ids )
			print2('Loaded MultiLineage for cancer_cell_ids only')
		else:
			ml = MultiLineage( file_name = FILES['division'] )
			print2('Loaded MultiLineage')

		try:
			if SPEC_lookup('multilineage', 'color_by_initial'):

				#all members
				member_lists = map( lambda lineage: lineage['members'], ml.get_lineages() )
				# print member_lists[0]
				print2('Number of lineages: ' + str( len( ml.get_lineages() ) ) )

				# cancer lineages only
				print2('Number of cancer lineages: ' + str( len( ml.get_cancer_lineages() ) ) )
				try:
					sp.plot_selected( *member_lists, depth=1, save_fig = FILES['out'] + '/space_plot_by_initial' )
					print2('saved space_plot_by_initial')
				except Exception as e:
					print2('(!) unable to save space_plot_by_initial \n'+str(e))
		except Exception as e:
			print2('(!) Unable to do color_by_initial analysis.')

		if SPEC_lookup('multilineage', 'color_by_branch') or SPEC_lookup('multilineage', 'save_all'):

			# make sure we get the right lineages to loop over!
			try:
				if SPEC_lookup('multilineage', 'cancer_only'):
					to_be_enumerated = ml.get_cancer_lineages()
				else:
					to_be_enumerated = ml.get_lineages()

				for i , lineage in enumerate( to_be_enumerated ):
					current_dir = FILES['out'] + '/detail_lineage' + str( i + 1 )
					os.makedirs( current_dir )

					try:
						levels = lineage_bfs( lineage['lineage'] )

						if SPEC_lookup('multilineage', 'color_by_branch'):
							for depth, level in levels.items():
								try:
									sp.plot_selected( *level , depth = depth , save_fig= current_dir + '/depth'+str(depth) )
									print2('saved color_by_branch for lineage: ' + str(i+1) + 'depth:' + str(depth) )
								except Exception as e:
									print2('(!) unable to save color_by_branch for lineage: ' + str(i+1) + 'depth:' + str(depth) + '\n'+str(e) )
								#endtry
							#endfor
						#endif
						if SPEC_lookup('multilineage', 'save_all'):
							try:
								lineage['lineage'].draw( width=20, save_fig = current_dir + '/basic.png' )
								print2('saved overall lineage for '+str(i+1))
							except Exception as e:
								print2('(!) unable to save overall lineage for '+str(i+1) +'\n'+str(e))
							#endtry
						#endif
					except Exception as e:
						print2('Unable to do lineage_bfs at depth'+str(i+1)+'\n'+str(e))
						continue
					#endtry
				#endfor	
			except Exception as e:
				print2('(!) Unable to do multilineage analysis: \n'+str(e))
			#endtry
	except Exception as e:
		print2('(!) Unable to do multilineage analysis due to failture in loading Lineage files into \
		 cc3dtools.MultiLineage \n'+str(e))
	#endtry
#endif

"""
	Sampling
"""

gc = None
pp = None


if SPEC_lookup( 'global' , 'sample') or SPEC_lookup( 'global', 'simple_sample'):
	try:

		if FILES['genomes'].split('.')[-1] == 'csv':
			print2('Converting csv file to gen2 file')
			from cc3dtools.Genome import csv_to_gen2
			csv_to_gen2(FILES['genomes'])
			FILES['genomes'] = FILES['genomes'].replace('csv', 'gen2')

		print2('loading genomes from: '+FILES['genomes'])
		gc = GenomeCompare.from_gen2_file(FILES['genomes'])
		print2('Loaded GenomeCompare module')
		pp = PostProcess(end_file=FILES['finish'], gc=gc, skip_types=skip_types)
		print2('Loaded PostProcess module')
	except Exception as e:
		print2('(!) Unable to load preprocess or genome model'+str(e))
		raise e

if SPEC_lookup( 'global' , 'sample' ):

	try:
		for i, sampling in enumerate(sampling_strategies):

			print2('Saving sample ' + str(i + 1) + ', method: '+ str( sampling[u'method'] ))
			
			# create a save directory
			current_dir = FILES['out'] + '/sample_' + str( i + 1 ) + '_' + str( sampling[u'name'] )
			os.makedirs( current_dir )

			try:
				# sampling circles
				if sampling[u'method'] == u'circle':
					sample, plot_stack = pp.sample_circular( return_plot_stack = True, **sampling[u'method_parameters'] )
				elif sampling[u'method'] == u'ellipse':
					sample, plot_stack = pp.sample_ellipsoid( return_plot_stack = True, **sampling[u'method_parameters'] )
				elif sampling[u'method'] == u'polygon':
					sample, plot_stack = pp.sample_polygon( return_plot_stack = True, **sampling[u'method_parameters'] )
				elif sampling[u'method'] == u'square':
					sample, plot_stack = pp.sample_square( return_plot_stack = True, **sampling[u'method_parameters'] )
				elif sampling[u'method'] == u'rectangle':
					sample, plot_stack = pp.sample_rectangle( return_plot_stack = True, **sampling[u'method_parameters'] )
				elif sampling[u'method'] == u'eccentric':
					eccentric_loaded = False
					try:
						results = pp.eccentric_sampling_strategy( **sampling[u'method_parameters'] )
						eccentric_loaded = True
					except Exception as e:
						print2('(!) Unknown exception occured during eccentric sampling: '+str(e) )
						raise e
					if eccentric_loaded:
						if u'pi_file' in sampling[u'save']:
							with open( current_dir + '/eccentric_results.json', 'w') as f:
								json.dump( results , f )
						if u'pickle' in sampling[u'save']:
							with open( current_dir + '/eccentric_results.picke' , 'w' ) as f:
								pickle.dump( results , f )
						if u'pi_plot' in sampling[u'save']:
							try:
								parsed = EccentricityProcessing.parse_results(results)

								## S VS A
								EccentricityProcessing.plot_S_vs_A(parsed, current_dir + '/S_vs_A.png', marker=False, loglog=False)
								EccentricityProcessing.plot_S_vs_A(parsed, current_dir + '/S_vs_A_loglog.png', marker=False, loglog=True)
								EccentricityProcessing.plot_S_vs_A(parsed, current_dir + '/S_vs_A_marker.png', marker=True, loglog=False)
								EccentricityProcessing.plot_S_vs_A(parsed, current_dir + '/S_vs_A_marker_loglog.png', marker=True, loglog=True)


								## S vs A (scaled)

								EccentricityProcessing.plot_S_vs_A_scaled(parsed, current_dir + '/S_vs_A_scaled.png', marker=False, loglog=False)
								EccentricityProcessing.plot_S_vs_A_scaled(parsed, current_dir + '/S_vs_A_loglog_scaled.png', marker=False, loglog=True)
								EccentricityProcessing.plot_S_vs_A_scaled(parsed, current_dir + '/S_vs_A_marker_scaled.png', marker=True, loglog=False)
								EccentricityProcessing.plot_S_vs_A_scaled(parsed, current_dir + '/S_vs_A_marker_loglog_scaled.png', marker=True, loglog=True)


								## E vs A
								EccentricityProcessing.plot_Epi_vs_A(parsed, current_dir + '/Epi_vs_A.png', marker=False, loglog=False)
								EccentricityProcessing.plot_Epi_vs_A(parsed, current_dir + '/Epi_vs_A_loglog.png', marker=False, loglog=True)
								EccentricityProcessing.plot_Epi_vs_A(parsed, current_dir + '/Epi_vs_A_marker.png', marker=True, loglog=False)
								EccentricityProcessing.plot_Epi_vs_A(parsed, current_dir + '/Epi_vs_A_marker_loglog.png', marker=True, loglog=True)

								## S (scaled) and EPi vs A
								EccentricityProcessing.plot_S_scaled_and_Epi_vs_A(parsed, current_dir + '/both_vs_A.png', loglog=False)
								EccentricityProcessing.plot_S_scaled_and_Epi_vs_A(parsed, current_dir + '/both_vs_A_loglog.png', loglog=True)
							except Exception as e:
								print2('(!) Something hapened in EccentricityProcessing:' +str(e))
								continue							
							pass

					continue # skip this round.
				#endif
			#endtry

			except Exception as e:
				print2('(!) Unable to conduct a sample: '+str(e))
				continue #skip to the next iteration

			try:
				analyzed = pp.sample_analyze(sample)
			except Exception as e:
				print2('(!) Unable to analyze sample \n'+str(e))
				continue #skip this round

			if sampling[u'save']:
				if u'tumor_plot' in sampling[u'save']:
					try:
						sp.plot_all(plot_stack = plot_stack, hide_numbers=('spatial_plot', 'hide_numbers', False ), \
							save_fig = current_dir+'/tumor_plot' )
						print2('Saved global tumor_plot')
					except Exception as e:
						print2('(!) Saving global tumor_plot failed: \n' + str(e) )
					
				#endif

				if u'pi' in sampling[u'save']:
					try:
						to_save = []
						for analysis in analyzed:
							dist = analysis[0]
							E_of_pi = proportion_pairwise_differences(analysis[1])
							# save distance, E_of_pi, size of cluster
							if E_of_pi is not None:
								to_save.append( [ dist , E_of_pi, analysis[1][1] ] )
							
						#endfor

						with open( current_dir + '/pi.csv', 'w' ) as f:
							w = csv.writer(f)
							for row in to_save:
								w.writerow(row)
							#endfor
						print2('Saved E(pi) information')
						#endwith
					except Exception as e:
						print2('(!) Unable to save E(pi) \n'+str(e))
				#endif

				if u'1D_plots' in sampling[u'save']:
					for analysis in analyzed:
						try:
							PostProcess.plot_frequency_graph(analysis[1], title = 'Distance : '+str( analysis[0] ) , save_fig = current_dir + '/1D_at_'+ str( analysis[0] ) + '.png' ) 
							print2('Saved 1D frequency plot at '+ str( analysis[0] ) )
						except Exception as e:
							print2('(!) Unable to save 1D frequency plot at '+str( analysis[0] ) +'\n'+str(e) )
					#endfor
				#endif

				if u'1D_plots_scaled' in sampling[u'save']:
					for analysis in analyzed:
						try:
							PostProcess.plot_frequency_graph(analysis[1], title = 'Distance : '+str( analysis[0] ) , save_fig = current_dir + '/1D_scaled_at_'+ str( analysis[0] ) + '.png' , scaled = True , ymax = int( SPEC_lookup( 'plots' , '1dscale' , 10000 )  ) ) 
							print2('Saved scaled 1D frequency plot at '+ str( analysis[0] ) )
						except Exception as e:
							print2('(!) Unable to save scaled 1D frequency plot at '+str( analysis[0] ) +'\n'+str(e) )
					#endfor
				#endif


				if u'2D_plots' in sampling[u'save']:
					if sampling[u'2D_methodology']:
						if u'shells' in sampling[u'2D_methodology']:

							for i in range(len(sample)/2):
								try:
									data = pp.frequency_analyze_ND( [ sample[i][1] , sample[-i-1][1] ] )
									PostProcess.plot_2D_frequency(data , title='Shell ' + str(i) + ' / Clusters at distances: '+str(sample[i][0])+' and '+str(sample[-1-i][0]) , \
										save_fig=current_dir+'/2D_at_shell_'+str(i)+'.png' )

									print2('Saved 2D Shell at distances: '+str(sample[i][0])+' and '+str(sample[-1-i][0]) )

									if u'2D_pickles' in sampling[u'save']:
										with open(current_dir+'/2Dfrequency_spectra_shell_'+str(i)+'.pickle', 'w') as f:
											pickle.dump( data , f )
											print2('Saved 2D analysis pickle')
										#end with
									#end if

								except Exception as e:
									print2('(!) Unable to save 2D Shell at distances: '+str(sample[i][0])+' and '+str(sample[-1-i][0]) + '\n'+ str(e) )
								#end try
							#endfor
						#endif shell

						if u'adjacent' in sampling[u'2D_methodology']:

							for i in range(len(sample)-1):
								try:
									data = pp.frequency_analyze_ND( [ sample[i][1] , sample[i+1][1] ] )
									PostProcess.plot_2D_frequency(data , title='Adjacent ' + str(i) + ' / Clusters at distances: '+str(sample[i][0])+' and '+str(sample[i+1][0]) , \
										save_fig=current_dir+'/2D_at_adjacent_'+str(i)+'.png' )
									print2('Saved 2D adjacent slices at distances: '+str(sample[i][0])+' and '+str(sample[-1-i][0]) )

									if u'2D_pickles' in sampling[u'save']:
										with open(current_dir+'/2Dfrequency_spectra_adjacent_'+str(i)+'.pickle', 'w') as f:
											pickle.dump( data , f )
											print2('Saved 2D analysis pickle')

								except Exception as e:
									print2('(!) Unable to save 2D adjacent slices at distances: '+str(sample[i][0])+' and '+str(sample[-1-i][0]) + '\n'+ str(e) )
							#endfor
						#endif adjacent

					else:
						print2('(!) SOFT FAIL: must supply 2D_methodology if you want to save 2D plots')
			#endif save
			
			# save pickles
			if u'sample_pickle' in sampling[u'save']:
				with open(current_dir+'/samples.pickle', 'w') as f:
					pickle.dump( sample , f )
					print2('Saved samples pickle')
			if u'1D_pickles' in sampling[u'save']:
				with open(current_dir+'/1Dfrequency_spectra.pickle', 'w') as f:
					pickle.dump( analyzed , f )
					print2('Saved 1D analysis pickles')
			#endif pickles
		#endfor
	except Exception as e:
		print2('(!) Unable to conduct sampling: \n'+str(e))
		raise e
#endif


from cc3dtools.Statistics import Statistics


if SPEC_lookup( 'global' , 'simple_sample'):
	## create a statistics generator module
	statistics_generator = Statistics(pp)
	eccentricities = [ 0.25, 0.5, 0.75, 1 ]
	Ns = [ 1250, 1500, 1750, 2000, 2250, 3000, ]
	ts = [ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ]
	stats = [ ('eccentricity', 'N', 't', 'S', 'SH', 'Epi', 'D', 'proportion_cancer', \
		'sd_N', 'sd_t','sd_S', 'sd_SH', 'sd_Epi', 'sd_D', 'sd_in_proportion' ) ]
		## i don't know how i can simplify this
	for es in eccentricities:
		# run over all eccentricies
		print2('Sampling eccentricity= '+str(es))
		for N in Ns:
			# run over all sample sizes
			print2('-> Sampling N='+str(N))
			for t in ts:
				print2('--> Sampling t='+str(t))
				# run over all thresholds
				new_stats = False
				new_stats = statistics_generator.simple_stats(e=es, t=t, N=N)
				# try:
				# 	new_stats = statistics_generator.simple_stats(e=es, t=t, N=N)
				# except Exception as e:
				# 	print2('(!) Exception occured '+str(e))

				if new_stats:
					stats.append(new_stats)
			# end threshold loop
		# end number loop
	# end eccentricity loop
	print2('Completed sampling')
	with open( FILES['out'] + '/modern_stats.csv', 'w' ) as f:
		w = csv.writer(f)
		for row in stats:
			w.writerow(row)
	print2('Completed saving')



"""
	CELL PLOTS
"""

if SPEC_lookup( 'global', 'cell_plots' ):
	try:
		FILES['cell_counts'] = glob.glob( FILES['directory'] + '/cell_count_*' )[0]
		with open( FILES['cell_counts'] ,'r' ) as f:
			reader = csv.reader(f)
			cell_counts = []
			for row in reader:
				cell_counts.append(row)
		print2('cell_counts loaded')
		success = True
	except:
		print2('(!) SOFT FAIL: No CELL_COUNT FILE SPECIFIED')
		success = False

	if success:
		try:
			TimeSeriesPlotters.cell_proportions_plot( cell_counts , file_name = FILES['out']+'/cell_proportions.png' )
			print2('saved proportion_plots')

			TimeSeriesPlotters.cell_counts_plot( cell_counts , file_name = FILES['out']+'/cell_counts.png' )
			print2('saved cell_number plots')

			TimeSeriesPlotters.all_cells_plot( cell_counts , file_name = FILES['out']+'/all_cells_plot.png' )
			print2('saved all cells plot')

		except Exception as e:
			print2('(!) SOFT FAIL: \n'+str(e))
		#endtry
	#endif
#endif

"""
	VOLUME PLOTS
"""

if SPEC_lookup( 'global', 'volume_plots' ):
	try:
		FILES['volume_data'] = glob.glob( FILES['directory'] + '/volume_*' )[0]
		with open( FILES['volume_data'] ,'r' ) as f:
			reader = csv.reader(f)
			volume_data = []
			for row in reader:
				volume_data.append(row)
		print2('volume loaded')
		success = True
	except:
		print2('(!) SOFT FAIL: No VOLUME FILE SPECIFIED')
		success = False

	if success:
		try:
			TimeSeriesPlotters.volume_plot( volume_data, FILES['out']+'/volume_plot.png' )
			
			print2('saved volume plots')

		except Exception as e:
			print2('(!) SOFT FAIL: \n'+str(e))
		#endtry
	#endif
#endif